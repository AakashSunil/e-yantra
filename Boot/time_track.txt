"""
    A^4 PROTOCOL Version 1.0

    Tracking Code
"""

from collections import deque
import numpy as np
import cv2
import time

cap = cv2.VideoCapture(0)

cap.set(3, 320)
cap.set(4, 240)

redL1 = (150, 80, 80)
redU1 = (180, 255, 255)
redL2 = (0, 100, 100)
redU2 = (10, 255, 255)

cv2.namedWindow("1", cv2.CV_WINDOW_AUTOSIZE)
cv2.namedWindow("2", cv2.CV_WINDOW_AUTOSIZE)

direction = ""

ret, frame = cap.read()
val = cv2.waitKey(30)

pts = deque(maxlen = 32)
counter = 0
(dX, dY) = (0, 0)
direction = ""

while (val != 27):
    t1 = time.clock()
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask1 = cv2.inRange(hsv, redL1, redU1)
    mask2 = cv2.inRange(hsv, redL2, redU2)
    mask = mask1 | mask2
    mask = cv2.erode(mask, None, iterations = 2)
    mask = cv2.dilate(mask, None, iterations = 2)
    
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
    center = None
    
    if len(cnts) > 0:
		# find the largest contour in the mask, then use
		# it to compute the minimum enclosing circle and
		# centroid
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
        
		# only proceed if the radius meets a minimum size
        if radius > 5:
			# draw the circle and centroid on the frame,
			# then update the list of tracked points
            cv2.circle(frame, (int(x), int(y)), int(radius), (0, 255, 255), 2)
            cv2.circle(frame, center, 5, (0, 0, 255), -1)
            pts.appendleft(center)

        for i in np.arange(1, len(pts)):
		    # if either of the tracked points are None, ignore
		    # them
            if pts[i - 1] is None or pts[i] is None:
                continue
             
		    # check to see if enough points have been accumulated in
		    # the buffer
            if len(pts) >= 10 and i == 1 and pts[-10] is not None:
			# compute the difference between the x and y
			# coordinates and re-initialize the direction
			# text variables
                dX = pts[-10][0] - pts[i][0]
                dY = pts[-10][1] - pts[i][1]
                (dirX, dirY) = ("", "")
 
			    # ensure there is significant movement in the
			    # x-direction
                if np.abs(dX) > 20:
                    if np.sign(dX) == 1:
                        dirX = "East"
                    else:
                        dirX = "West"
 
			    # ensure there is significant movement in the
			    # y-direction
                if np.abs(dY) > 20:
                    if np.sign(dY) == 1 : 
                        dirY = "North"
                    else :
                        dirY = "South"
			    # handle when both directions are non-empty
                if dirX != "" and dirY != "":
                    direction = "{}-{}".format(dirY, dirX)
 
			    # otherwise, only one direction is non-empty
                else:
                    direction = dirX if dirX != "" else dirY            

    t2 = time.clock()
    print(t2 - t1)
    cv2.imshow("1", frame)
    cv2.imshow("2", mask)
    val = cv2.waitKey(30)
    ret, frame = cap.read()

cv2.destroyAllWindows()
cv2.waitKey(0)